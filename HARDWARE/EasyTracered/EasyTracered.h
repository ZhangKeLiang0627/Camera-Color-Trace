#ifndef _EASY_TRACERED_H
#define _EASY_TRACERED_H

#define IMG_X 120	  // 图片x坐标
#define IMG_Y 60	  // 图片y坐标
#define IMG_W 20 // 图片宽度
#define IMG_H 50 // 图片高度

#define ALLOW_FAIL_PER 30 // 容错率，每1<<ALLOW_FAIL_PER个点允许出现一个错误点，容错率越大越容易识别，但错误率越大
#define ITERATE_NUM 30	 // 迭代次数，迭代次数越多识别越精确，但计算量越大

// 80
#define ThresholdValue 105 // 灰度阈值 后期可以使用大津法

typedef struct
{
	unsigned char H_MIN; // 目标最小色调
	unsigned char H_MAX; // 目标最大色调

	unsigned char S_MIN; // 目标最小饱和度
	unsigned char S_MAX; // 目标最大饱和度

	unsigned char L_MIN; // 目标最小亮度
	unsigned char L_MAX; // 目标最大亮度

	unsigned int WIDTH_MIN; // 目标最小宽度
	unsigned int HEIGHT_MIN; // 目标最小高度

	unsigned int WIDTH_MAX; // 目标最大宽度
	unsigned int HEIGHT_MAX; // 目标最大高度

} TARGET_CONDI; // 判定为的目标条件

typedef struct
{
	unsigned int x; // 目标的x坐标
	unsigned int y; // 目标的y坐标
	unsigned int w; // 目标的宽度
	unsigned int h; // 目标的高度
} RESULT;			// 识别结果

// 唯一的API，用户将识别条件写入Condition指向的结构体中，该函数将返回目标的x，y坐标和长宽
// 返回1识别成功，返回1识别失败
int Trace(const TARGET_CONDI *Condition, RESULT *Resu);
unsigned short LCD_ReadPoint(unsigned short x, unsigned short y); // 读某点颜色
void Gray(unsigned short *p);									  // 把图片二值化函数 只能变灰一个点

int BlackTrace(const TARGET_CONDI *Condition, RESULT *Resu);
#endif
